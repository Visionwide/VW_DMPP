@page "/modeeels"
@inject IJSRuntime JSRuntime

<PageTitle>機型檢驗標準數值</PageTitle>

<!-- ✨ 新增: 儲存提示 -->
<div class="save-indicator" id="saveIndicator">✓ 已自動保存</div>

<div class="container">
    <div class="controls">
        <p>標準模組: <strong>SF系列定位及重複精度</strong></p>
        <div class="action-buttons">
            <button class="btn-control" @onclick="ShowCreateModal">新增模組</button>
            <button class="btn-control" @onclick="() => ShowCopyModalFromSelected()" disabled="@(!HasSelectedModel())">複製模組</button>
            <button class="btn-control" @onclick="() => ShowEditModalFromSelected()" disabled="@(!HasSelectedModel())">編輯模組</button>
            
            <!-- ✨ 新增: 匯出和清除按鈕 -->
            <button class="btn-control btn-export" @onclick="ExportData">匯出資料</button>
            <button class="btn-control btn-clear" @onclick="ClearAllData">清除記錄</button>
        </div>

        <div class="search-filter">
            <div class="search-box">
                <input type="text" placeholder="搜尋機型..." @bind="searchTerm" @bind:event="oninput" @onkeyup="@(e => { if (e.Key == "Enter") FilterModels(); })" />
                <button class="btn-search" @onclick="FilterModels">搜尋</button>
            </div>

            <div class="model-selector">
                <label for="modelSelect">選擇機型：</label>
                <select id="modelSelect" @bind="selectedModelId" @bind:event="onchange">
                    <option value="">-- 請選擇機型 --</option>
                    @foreach (var model in models)
                    {
                        <option value="@model.Id">@model.Name</option>
                    }
                </select>
            </div>
        </div>
    </div>

    <h2>機型檢驗標準數值</h2>

    @if (filteredModels.Count == 0)
    {
        <div class="no-results">沒有找到符合條件的機型</div>
    }
    else
    {
        @foreach (var model in filteredModels)
        {
            <div class="table-title @(model.IsCollapsed ? "collapsed" : "")" @onclick="() => ToggleTable(model.Id)">
                <span class="arrow">▼</span>
                <span>機型: <strong>@model.Name</strong></span>
                <div class="table-actions" @onclick:stopPropagation="true">
                    <button class="btn-table-action" @onclick="() => ShowEditModal(model.Id)">編輯</button>
                    <button class="btn-table-action" @onclick="() => ShowCopyModal(model.Id)">複製</button>
                    <button class="btn-table-action btn-delete-action" @onclick="() => ConfirmDeleteModel(model.Id)">刪除</button>
                </div>
            </div>
            <div class="table-content @(model.IsCollapsed ? "collapsed" : "")">
                <div class="table-wrapper">
                    <table class="inspection-table">
                        <thead>
                            <tr>
                                <th rowspan="2" style="width: 8%;">軸向</th>
                                <th colspan="4">編碼器</th>
                                <th colspan="4">光學尺</th>
                            </tr>
                            <tr>
                                <th>JIS-B6333<br>定位精度mm</th>
                                <th>VDI 3441<br>定位精度mm</th>
                                <th>JIS-B6333<br>重複精度mm</th>
                                <th>VDI 3441<br>重複精度mm</th>
                                <th>JIS-B6333<br>定位精度mm</th>
                                <th>VDI 3441<br>定位精度mm</th>
                                <th>JIS-B6333<br>重複精度mm</th>
                                <th>VDI 3441<br>重複精度mm</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var axis in model.Axes)
                            {
                                <tr>
                                    <td>@axis.Name</td>
                                    <td>@axis.EncoderJIS</td>
                                    <td>@axis.EncoderVDI</td>
                                    <td>@axis.EncoderJISRepeat</td>
                                    <td>@axis.EncoderVDIRepeat</td>
                                    <td>@axis.OpticalJIS</td>
                                    <td>@axis.OpticalVDI</td>
                                    <td>@axis.OpticalJISRepeat</td>
                                    <td>@axis.OpticalVDIRepeat</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    }
</div>

@if (showModal)
{
    <div class="modal-backdrop" @onclick="CloseModal"></div>
    <div class="modal-container" @onclick:stopPropagation="true">
        <div class="modal-header">
            <h3>@modalTitle</h3>
            <button class="btn-close" @onclick="CloseModal">×</button>
        </div>
        <div class="modal-body">
            <div class="form-group">
                <label for="modelName">機型名稱:</label>
                <input type="text" id="modelName" @bind="editingModel.Name" class="@(modelNameError ? "error" : "")" />
                @if (modelNameError)
                {
                    <span class="error-message">請輸入機型名稱</span>
                }
            </div>

            <h4>軸向設定</h4>
            @foreach (var axis in editingModel.Axes)
            {
                <div class="axis-section">
                    <h5>@axis.Name 軸</h5>
                    <div class="axis-values">
                        <div class="value-group">
                            <label>編碼器 JIS-B6333 定位精度:</label>
                            <input type="text" @bind="axis.EncoderJIS" />
                        </div>
                        <div class="value-group">
                            <label>編碼器 VDI 3441 定位精度:</label>
                            <input type="text" @bind="axis.EncoderVDI" />
                        </div>
                        <div class="value-group">
                            <label>編碼器 JIS-B6333 重複精度:</label>
                            <input type="text" @bind="axis.EncoderJISRepeat" />
                        </div>
                        <div class="value-group">
                            <label>編碼器 VDI 3441 重複精度:</label>
                            <input type="text" @bind="axis.EncoderVDIRepeat" />
                        </div>
                        <div class="value-group">
                            <label>光學尺 JIS-B6333 定位精度:</label>
                            <input type="text" @bind="axis.OpticalJIS" />
                        </div>
                        <div class="value-group">
                            <label>光學尺 VDI 3441 定位精度:</label>
                            <input type="text" @bind="axis.OpticalVDI" />
                        </div>
                        <div class="value-group">
                            <label>光學尺 JIS-B6333 重複精度:</label>
                            <input type="text" @bind="axis.OpticalJISRepeat" />
                        </div>
                        <div class="value-group">
                            <label>光學尺 VDI 3441 重複精度:</label>
                            <input type="text" @bind="axis.OpticalVDIRepeat" />
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="modal-footer">
            <button class="btn-cancel" @onclick="CloseModal">取消</button>
            <button class="btn-save" @onclick="SaveModel">儲存</button>
        </div>
    </div>
}

@if (showDeleteConfirm)
{
    <div class="modal-backdrop" @onclick="CancelDelete"></div>
    <div class="confirm-dialog" @onclick:stopPropagation="true">
        <h3>確認刪除</h3>
        <p>確定要刪除機型 "@(models.FirstOrDefault(m => m.Id == modelToDelete)?.Name)" 嗎？</p>
        <div class="confirm-buttons">
            <button class="btn-cancel" @onclick="CancelDelete">取消</button>
            <button class="btn-delete" @onclick="DeleteModel">刪除</button>
        </div>
    </div>
}

<style>
    * {
        box-sizing: border-box;
    }

    .container {
        max-width: 1400px;
        margin: 0 auto;
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .controls {
        margin-bottom: 20px;
        padding: 15px;
        background-color: #f9f9f9;
        border-radius: 4px;
    }

    .controls p {
        margin: 5px 0;
    }

    .action-buttons {
        margin: 10px 0;
    }

    .search-filter {
        display: flex;
        justify-content: space-between;
        margin-top: 15px;
        gap: 20px;
    }

    .search-box {
        display: flex;
        gap: 10px;
        flex: 1;
    }

    .search-box input {
        flex: 1;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .model-selector {
        display: flex;
        align-items: center;
        gap: 10px;
        flex: 1;
    }

    .model-selector select {
        flex: 1;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .btn-control, .btn-search, .btn-save, .btn-cancel, .btn-delete {
        padding: 8px 16px;
        margin-right: 10px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        transition: background-color 0.3s;
    }

    .btn-control:hover, .btn-search:hover, .btn-save:hover {
        background-color: #45a049;
    }

    .btn-control:disabled {
        background-color: #cccccc;
        cursor: not-allowed;
    }

    .btn-search {
        margin-right: 0;
    }

    .btn-cancel {
        background-color: #f1f1f1;
        color: #333;
    }

    .btn-cancel:hover {
        background-color: #e1e1e1;
    }

    .btn-delete {
        background-color: #f44336;
    }

    .btn-delete:hover {
        background-color: #d32f2f;
    }

    .btn-delete-action {
        background-color: #f44336;
    }

    .btn-delete-action:hover {
        background-color: #d32f2f;
    }

    .table-wrapper {
        overflow-x: auto;
        margin: 20px 0;
    }

    .inspection-table {
        width: 100%;
        min-width: 800px;
        border-collapse: collapse;
        table-layout: auto;
    }

    .inspection-table, .inspection-table th, .inspection-table td {
        border: 1px solid #333;
    }

    .inspection-table th, .inspection-table td {
        padding: 10px;
        text-align: center;
        font-size: 14px;
    }

    .inspection-table thead th {
        background-color: #2c3e50;
        color: white;
        font-weight: bold;
    }

    .inspection-table tbody td:first-child {
        font-weight: bold;
        background-color: #ecf0f1;
    }

    .table-title {
        background-color: #d0d0d0;
        color: #333;
        font-weight: bold;
        padding: 12px;
        margin: 20px 0 10px 0;
        border-radius: 0;
        cursor: pointer;
        user-select: none;
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 10px;
        transition: background-color 0.3s;
        border: 1px solid #999;
    }

    .table-title:hover {
        background-color: #c0c0c0;
    }

    .table-title .arrow {
        transition: transform 0.3s;
        font-size: 14px;
        color: #333;
    }

    .table-title.collapsed .arrow {
        transform: rotate(-90deg);
    }

    .table-actions {
        display: flex;
        gap: 10px;
    }

    .btn-table-action {
        padding: 5px 10px;
        background-color: #3498db;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 12px;
        transition: background-color 0.3s;
    }

    .btn-table-action:hover {
        background-color: #2980b9;
    }

    .table-content {
        max-height: 1000px;
        overflow: hidden;
        transition: max-height 0.4s ease-out, opacity 0.3s ease-out;
        opacity: 1;
    }

    .table-content.collapsed {
        max-height: 0;
        opacity: 0;
    }

    h2 {
        color: #2c3e50;
        border-bottom: 3px solid #3498db;
        padding-bottom: 10px;
    }

    .no-results {
        padding: 20px;
        text-align: center;
        background-color: #f9f9f9;
        border-radius: 4px;
        margin: 20px 0;
        font-style: italic;
        color: #666;
    }

    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
    }

    .modal-container {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 80%;
        max-width: 800px;
        max-height: 90vh;
        overflow-y: auto;
        background-color: white;
        border-radius: 8px;
        z-index: 1001;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 20px;
        border-bottom: 1px solid #ddd;
    }

    .modal-header h3 {
        margin: 0;
        color: #2c3e50;
    }

    .btn-close {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        color: #666;
    }

    .modal-body {
        padding: 20px;
    }

    .modal-footer {
        padding: 15px 20px;
        border-top: 1px solid #ddd;
        display: flex;
        justify-content: flex-end;
        gap: 10px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }

    .form-group input {
        width: 100%;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .form-group input.error {
        border-color: #f44336;
    }

    .error-message {
        color: #f44336;
        font-size: 12px;
        margin-top: 5px;
        display: block;
    }

    .axis-section {
        margin-bottom: 20px;
        padding: 15px;
        background-color: #f9f9f9;
        border-radius: 4px;
    }

    .axis-section h5 {
        margin-top: 0;
        color: #2c3e50;
    }

    .axis-values {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 15px;
    }

    .value-group {
        margin-bottom: 10px;
    }

    .value-group label {
        display: block;
        margin-bottom: 5px;
        font-size: 13px;
    }

    .value-group input {
        width: 100%;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .confirm-dialog {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 400px;
        background-color: white;
        border-radius: 8px;
        z-index: 1001;
        padding: 20px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-align: center;
    }

    .confirm-buttons {
        margin-top: 20px;
        display: flex;
        justify-content: center;
        gap: 15px;
    }

    /* ✨ 新增: 儲存提示樣式 */
    .save-indicator {
        position: fixed;
        top: 20px;
        right: 20px;
        background: #28a745;
        color: white;
        padding: 10px 20px;
        border-radius: 5px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.2);
        opacity: 0;
        transition: opacity 0.3s;
        z-index: 2000;
        font-weight: bold;
    }

    .save-indicator.show {
        opacity: 1;
    }

    /* ✨ 新增: 匯出和清除按鈕樣式 */
    .btn-export {
        background-color: #17a2b8 !important;
    }

    .btn-export:hover {
        background-color: #138496 !important;
    }

    .btn-clear {
        background-color: #dc3545 !important;
    }

    .btn-clear:hover {
        background-color: #c82333 !important;
    }
</style>

@code {
    private List<ModelData> models = new();
    private List<ModelData> filteredModels = new();
    private string searchTerm = "";
    private string? selectedModelId;
    private bool showModal = false;
    private bool showDeleteConfirm = false;
    private string modalTitle = "";
    private string modelToDelete = "";
    private ModelData editingModel = new();
    private string editMode = "";
    private bool modelNameError = false;

    // ✨ 新增: LocalStorage 相關變數
    private const string STORAGE_KEY = "modelData_SF2112";
    private bool isDataLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        // 先嘗試從 localStorage 載入
        await LoadFromLocalStorage();
        
        // 如果沒有儲存的資料,使用預設資料
        if (!isDataLoaded || models.Count == 0)
        {
            InitializeModels();
        }
        
        filteredModels = new List<ModelData>(models);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("console.log", "✓ 機型管理系統已載入");
        }
    }

    // ✨ 新增: 載入資料
    private async Task LoadFromLocalStorage()
    {
        try
        {
            var json = await JSRuntime.InvokeAsync<string>("localStorage.getItem", STORAGE_KEY);
            
            if (!string.IsNullOrEmpty(json))
            {
                var loadedModels = System.Text.Json.JsonSerializer.Deserialize<List<ModelData>>(json);
                if (loadedModels != null && loadedModels.Count > 0)
                {
                    models = loadedModels;
                    isDataLoaded = true;
                    await JSRuntime.InvokeVoidAsync("console.log", "✓ 已載入先前的機型資料");
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"載入資料失敗: {ex.Message}");
        }
    }

    // ✨ 新增: 儲存資料
    private async Task SaveToLocalStorage()
    {
        try
        {
            var json = System.Text.Json.JsonSerializer.Serialize(models);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", STORAGE_KEY, json);
            await JSRuntime.InvokeVoidAsync("console.log", "✓ 機型資料已自動保存");
            
            // 顯示儲存提示
            await ShowSaveIndicator();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"保存失敗: {ex.Message}");
        }
    }

    // ✨ 新增: 顯示儲存提示
    private async Task ShowSaveIndicator()
    {
        await JSRuntime.InvokeVoidAsync("eval", @"
            const indicator = document.getElementById('saveIndicator');
            if (indicator) {
                indicator.classList.add('show');
                setTimeout(() => indicator.classList.remove('show'), 2000);
            }
        ");
    }

    // ✨ 新增: 清除所有資料
    private async Task ClearAllData()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "確定要清除所有機型資料嗎?此操作無法復原!");
        
        if (confirmed)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("localStorage.removeItem", STORAGE_KEY);
                InitializeModels();
                filteredModels = new List<ModelData>(models);
                selectedModelId = "";
                await JSRuntime.InvokeVoidAsync("alert", "✓ 所有資料已清除");
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"清除失敗: {ex.Message}");
            }
        }
    }

    // ✨ 新增: 匯出資料
    private async Task ExportData()
    {
        try
        {
            var json = System.Text.Json.JsonSerializer.Serialize(models, new System.Text.Json.JsonSerializerOptions 
            { 
                WriteIndented = true 
            });
            
            var fileName = $"model_data_{DateTime.Now:yyyyMMdd_HHmmss}.json";
            
            await JSRuntime.InvokeVoidAsync("eval", $@"
                const dataStr = {System.Text.Json.JsonSerializer.Serialize(json)};
                const dataBlob = new Blob([dataStr], {{ type: 'application/json' }});
                const url = URL.createObjectURL(dataBlob);
                const link = document.createElement('a');
                link.href = url;
                link.download = '{fileName}';
                link.click();
                URL.revokeObjectURL(url);
            ");
            
            await JSRuntime.InvokeVoidAsync("console.log", "✓ 資料已匯出");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"匯出失敗: {ex.Message}");
        }
    }

    private void InitializeModels()
    {
        models = new List<ModelData>
        {
            new ModelData
            {
                Id = "sf2112",
                Name = "SF-2112",
                IsCollapsed = false,
                Axes = new List<AxisData>
                {
                    new AxisData { Name = "X", EncoderJIS = "±0.010/全行程", EncoderVDI = "P 0.015", EncoderJISRepeat = "±0.003", EncoderVDIRepeat = "PS 0.010", OpticalJIS = "±0.008/全行程", OpticalVDI = "P 0.010", OpticalJISRepeat = "±0.002", OpticalVDIRepeat = "PS 0.008" },
                    new AxisData { Name = "Y", EncoderJIS = "±0.010/全行程", EncoderVDI = "P 0.018", EncoderJISRepeat = "±0.003", EncoderVDIRepeat = "PS 0.015", OpticalJIS = "±0.008/全行程", OpticalVDI = "P 0.016", OpticalJISRepeat = "±0.002", OpticalVDIRepeat = "PS 0.012" },
                    new AxisData { Name = "Z", EncoderJIS = "±0.010/全行程", EncoderVDI = "P 0.012", EncoderJISRepeat = "±0.003", EncoderVDIRepeat = "PS 0.010", OpticalJIS = "±0.008/全行程", OpticalVDI = "P 0.010", OpticalJISRepeat = "±0.002", OpticalVDIRepeat = "PS 0.008" }
                }
            },
            new ModelData
            {
                Id = "sf3020",
                Name = "SF-3020",
                IsCollapsed = true,
                Axes = new List<AxisData>
                {
                    new AxisData { Name = "X", EncoderJIS = "±0.012/全行程", EncoderVDI = "P 0.020", EncoderJISRepeat = "±0.004", EncoderVDIRepeat = "PS 0.012", OpticalJIS = "±0.010/全行程", OpticalVDI = "P 0.015", OpticalJISRepeat = "±0.003", OpticalVDIRepeat = "PS 0.010" },
                    new AxisData { Name = "Y", EncoderJIS = "±0.012/全行程", EncoderVDI = "P 0.022", EncoderJISRepeat = "±0.004", EncoderVDIRepeat = "PS 0.018", OpticalJIS = "±0.010/全行程", OpticalVDI = "P 0.018", OpticalJISRepeat = "±0.003", OpticalVDIRepeat = "PS 0.015" },
                    new AxisData { Name = "Z", EncoderJIS = "±0.012/全行程", EncoderVDI = "P 0.015", EncoderJISRepeat = "±0.004", EncoderVDIRepeat = "PS 0.012", OpticalJIS = "±0.010/全行程", OpticalVDI = "P 0.012", OpticalJISRepeat = "±0.003", OpticalVDIRepeat = "PS 0.010" }
                }
            }
        };
    }

    private bool HasSelectedModel()
    {
        return !string.IsNullOrEmpty(selectedModelId) && models.Any(m => m.Id == selectedModelId);
    }

    private void ShowEditModalFromSelected()
    {
        if (!string.IsNullOrEmpty(selectedModelId))
        {
            ShowEditModal(selectedModelId);
        }
    }

    private void ShowCopyModalFromSelected()
    {
        if (!string.IsNullOrEmpty(selectedModelId))
        {
            ShowCopyModal(selectedModelId);
        }
    }

    private void ToggleTable(string modelId)
    {
        var model = filteredModels.FirstOrDefault(m => m.Id == modelId);
        if (model != null)
        {
            model.IsCollapsed = !model.IsCollapsed;
        }
    }

    private void FilterModels()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredModels = new List<ModelData>(models);
        
        }
        else
        {
            filteredModels = models
                .Where(m => m.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private void ShowCreateModal()
    {
        editMode = "create";
        modalTitle = "新增機型";
        modelNameError = false;

        editingModel = new ModelData
        {
            Id = Guid.NewGuid().ToString("N"),
            Name = "",
            IsCollapsed = false,
            Axes = new List<AxisData>
            {
                new AxisData { Name = "X" },
                new AxisData { Name = "Y" },
                new AxisData { Name = "Z" }
            }
        };

        showModal = true;
    }

    private void ShowEditModal(string? modelId = null)
    {
        string? idToEdit = modelId ?? selectedModelId;
        if (string.IsNullOrEmpty(idToEdit)) return;

        editMode = "edit";
        modalTitle = "編輯機型";
        modelNameError = false;

        var originalModel = models.FirstOrDefault(m => m.Id == idToEdit);
        if (originalModel != null)
        {
            editingModel = new ModelData
            {
                Id = originalModel.Id,
                Name = originalModel.Name,
                IsCollapsed = originalModel.IsCollapsed,
                Axes = originalModel.Axes.Select(a => new AxisData
                {
                    Name = a.Name,
                    EncoderJIS = a.EncoderJIS,
                    EncoderVDI = a.EncoderVDI,
                    EncoderJISRepeat = a.EncoderJISRepeat,
                    EncoderVDIRepeat = a.EncoderVDIRepeat,
                    OpticalJIS = a.OpticalJIS,
                    OpticalVDI = a.OpticalVDI,
                    OpticalJISRepeat = a.OpticalJISRepeat,
                    OpticalVDIRepeat = a.OpticalVDIRepeat
                }).ToList()
            };

            showModal = true;
        }
    }

    private void ShowCopyModal(string? modelId = null)
    {
        string? idToCopy = modelId ?? selectedModelId;
        if (string.IsNullOrEmpty(idToCopy)) return;

        editMode = "copy";
        modalTitle = "複製機型";
        modelNameError = false;

        var originalModel = models.FirstOrDefault(m => m.Id == idToCopy);
        if (originalModel != null)
        {
            editingModel = new ModelData
            {
                Id = Guid.NewGuid().ToString("N"),
                Name = originalModel.Name + " (複製)",
                IsCollapsed = originalModel.IsCollapsed,
                Axes = originalModel.Axes.Select(a => new AxisData
                {
                    Name = a.Name,
                    EncoderJIS = a.EncoderJIS,
                    EncoderVDI = a.EncoderVDI,
                    EncoderJISRepeat = a.EncoderJISRepeat,
                    EncoderVDIRepeat = a.EncoderVDIRepeat,
                    OpticalJIS = a.OpticalJIS,
                    OpticalVDI = a.OpticalVDI,
                    OpticalJISRepeat = a.OpticalJISRepeat,
                    OpticalVDIRepeat = a.OpticalVDIRepeat
                }).ToList()
            };

            showModal = true;
        }
    }

    // ✨ 修改: 加入自動保存
    private async Task SaveModel()
    {
        modelNameError = false;

        if (string.IsNullOrWhiteSpace(editingModel.Name))
        {
            modelNameError = true;
            return;
        }

        if (editMode == "create" || editMode == "copy")
        {
            models.Add(editingModel);
        }
        else if (editMode == "edit")
        {
            var index = models.FindIndex(m => m.Id == editingModel.Id);
            if (index >= 0)
            {
                models[index] = editingModel;
            }
        }

        // ✨ 新增: 自動保存到 localStorage
        await SaveToLocalStorage();

        FilterModels();
        CloseModal();
    }

    private void ConfirmDeleteModel(string modelId)
    {
        modelToDelete = modelId;
        showDeleteConfirm = true;
    }

    // ✨ 修改: 加入自動保存
    private async Task DeleteModel()
    {
        var model = models.FirstOrDefault(m => m.Id == modelToDelete);
        if (model != null)
        {
            models.Remove(model);

            // 如果刪除的是當前選擇的模型，清空選擇
            if (selectedModelId == modelToDelete)
            {
                selectedModelId = "";
            }

            // ✨ 新增: 自動保存到 localStorage
            await SaveToLocalStorage();

            FilterModels();
        }

        showDeleteConfirm = false;
        modelToDelete = "";
    }

    private void CancelDelete()
    {
        showDeleteConfirm = false;
        modelToDelete = "";
    }

    private void CloseModal()
    {
        showModal = false;
        editingModel = new ModelData();
        editMode = "";
        modelNameError = false;
    }

    // ✨ 資料類別定義
    public class ModelData
    {
        public string Id { get; set; } = "";
        public string Name { get; set; } = "";
        public bool IsCollapsed { get; set; }
        public List<AxisData> Axes { get; set; } = new();
    }

    public class AxisData
    {
        public string Name { get; set; } = "";
        public string EncoderJIS { get; set; } = "";
        public string EncoderVDI { get; set; } = "";
        public string EncoderJISRepeat { get; set; } = "";
        public string EncoderVDIRepeat { get; set; } = "";
        public string OpticalJIS { get; set; } = "";
        public string OpticalVDI { get; set; } = "";
        public string OpticalJISRepeat { get; set; } = "";
        public string OpticalVDIRepeat { get; set; } = "";
    }
}
